#include <iostream>
#include <sstream>
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>

using namespace sf;
using namespace std;

enum class side
{
    LEFT,
    RIGHT,
    UP,
    DOWN,
    None
};

int MAP_WIDTH;
float CELL_SIZE = 20.45f;
float ENTITY_SPEED = 0.1f;
float X_OFFSET = 21.5f;
float Y_OFFSET = 17.0f;
float X_LEFT = 42.0f;
float X_RIGHT = 555.0f;
float Y_UP = 40.0f;
float Y_DOWN = 608.0f;

vector<vector<int>> grid = {
    {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3},
    {3, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 3, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 3},
    {3, 2, 0, 3, 3, 3, 1, 0, 3, 3, 3, 3, 1, 0, 3, 1, 0, 3, 3, 3, 3, 1, 0, 3, 3, 3, 2, 0, 3},
    {3, 1, 0, 3, 3, 3, 1, 0, 3, 3, 3, 3, 1, 0, 3, 1, 0, 3, 3, 3, 3, 1, 0, 3, 3, 3, 1, 0, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3},
    {3, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 3},
    {3, 1, 0, 3, 3, 3, 1, 0, 3, 1, 0, 3, 3, 3, 3, 3, 3, 3, 1, 0, 3, 1, 0, 3, 3, 3, 1, 0, 3},
    {3, 1, 1, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 1, 1, 0, 3},
    {3, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 3},
    {3, 3, 3, 3, 3, 3, 1, 0, 3, 3, 3, 3, 0, 0, 3, 0, 0, 3, 3, 3, 3, 1, 0, 3, 3, 3, 3, 3, 3},
    {3, 3, 3, 3, 3, 3, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 3, 3, 3, 3, 3, 3},
    {3, 3, 3, 3, 3, 3, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 3, 3, 3, 3, 3, 3},
    {3, 3, 3, 3, 3, 3, 1, 0, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 1, 0, 3, 3, 3, 3, 3, 3},
    {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
    {3, 3, 3, 3, 3, 3, 1, 0, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 1, 0, 3, 3, 3, 3, 3, 3},
    {3, 3, 3, 3, 3, 3, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 3, 3, 3, 3, 3, 3},
    {3, 3, 3, 3, 3, 3, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 3, 3, 3, 3, 3, 3},
    {3, 3, 3, 3, 3, 3, 1, 0, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 1, 0, 3, 3, 3, 3, 3, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3},
    {3, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 3, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 3},
    {3, 1, 0, 3, 3, 3, 1, 0, 3, 3, 3, 3, 1, 0, 3, 1, 0, 3, 3, 3, 3, 1, 0, 3, 3, 3, 1, 0, 3},
    {3, 2, 1, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 1, 1, 2, 0, 3},
    {3, 0, 0, 1, 0, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 1, 0, 0, 0, 3},
    {3, 3, 3, 1, 0, 3, 1, 0, 3, 1, 0, 3, 3, 3, 3, 3, 3, 3, 1, 0, 3, 1, 0, 3, 1, 0, 3, 3, 3},
    {3, 1, 1, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 1, 1, 0, 3},
    {3, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 3, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 3},
    {3, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 3, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 3},
    {3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3},
    {3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3},
    {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
};

struct Position
{
	float x;
	float y;

	bool operator==(const Position& position)
	{
		return this->x == position.x && this->y == position.y;
	}
};

class Pacman
{
    private:
        bool animation_over;
        bool dead;
        unsigned char direction;
        unsigned short animation_timer;
        unsigned short energizer_timer;
        Position position;

    public:
        Pacman();

        bool get_animation_over();
        bool get_dead();
        unsigned char get_direction();
        unsigned short get_energizer_timer();
        void draw(bool i_victory, sf::RenderWindow& i_window);
        void reset();
        void set_animation_timer(unsigned short i_animation_timer);
        void set_dead(bool i_dead);
        void set_position(short i_x, short i_y);
        void update(unsigned char i_level, std::array<std::array<Cell, MAP_HEIGHT>, MAP_WIDTH>& i_map);

        Position get_position();
};